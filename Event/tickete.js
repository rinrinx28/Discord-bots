const {
  Client,
  CommandInteraction,
  MessageEmbed,
  MessageActionRow,
  MessageButton,
  Modal,
  TextInputComponent,
} = require("discord.js");
const ticketdb = require("../schema/ticketdb");
const questiondb = require("../schema/question");
const { createTranscript } = require("discord-html-transcripts");
const { logsTicket } = require("../config/main.json");
const CrytoJs = require("crypto-js");
const fs = require("fs");

module.exports = {
  name: "interactionCreate",
  names: "Ticket Event",
  /**
   * @param {CommandInteraction} interaction
   * @param {Client} client
   */
  async execute(interaction, client) {
    var button = new MessageActionRow().addComponents(
      new MessageButton()
        .setCustomId("close")
        .setStyle("SUCCESS")
        .setLabel("Close Ticket")
        .setEmoji("üóë"),
    );

    var buttons = (status) => [
      new MessageActionRow().addComponents(
        new MessageButton()
          .setCustomId("transcripts")
          .setEmoji("üñ®")
          .setLabel("Xo√° Ticket")
          .setDisabled(status)
          .setStyle("SECONDARY"),
      ),
    ];

    // const form = [
    //   {
    //     ID: "name",
    //     LABEL: "H·ªç v√† T√™n / Ng√†y th√°ng nƒÉm Sinh ? ",
    //     MIN_LENGTH: 0,
    //     MAX_LENGTH: 200,
    //     PLACE_HOLDER: "Vui l√≤ng ghi r√µ th√¥ng tin.",
    //     REQUIRED: true,
    //   },
    //   {
    //     ID: "nguoi",
    //     LABEL: "Ai l√† ng∆∞·ªùi gi·ªõi thi·ªáu b·∫°n ƒë·∫øn nh√≥m ?",
    //     MIN_LENGTH: 0,
    //     MAX_LENGTH: 200,
    //     PLACE_HOLDER: "Vui l√≤ng ghi r√µ th√¥ng tin,",
    //     REQUIRED: true,
    //   },
    //   {
    //     ID: "sung",
    //     LABEL: "S√∫ng ƒëang s·ªü h·ªØu (n·∫øu c√≥) ? ",
    //     MIN_LENGTH: 0,
    //     MAX_LENGTH: 200,
    //     PLACE_HOLDER: "Vui l√≤ng ghi r√µ th√¥ng tin.",
    //     REQUIRED: true,
    //   },
    //   {
    //     ID: "gang",
    //     LABEL: "C√°c gang, team c·ªßa server ƒë√£ t·ª´ng tham gia ?",
    //     MIN_LENGTH: 0,
    //     MAX_LENGTH: 200,
    //     PLACE_HOLDER: "Vui l√≤ng ghi r√µ th√¥ng tin.",
    //     REQUIRED: true,
    //   },
    //   {
    //     ID: "steam",
    //     LABEL: "Link steam b·∫°n l√† g√¨ ?",
    //     MIN_LENGTH: 0,
    //     MAX_LENGTH: 200,
    //     PLACE_HOLDER: "Vui l√≤ng ghi r√µ th√¥ng tin.",
    //     REQUIRED: true,
    //   },
    // ];

    //! ----------------------------------------
    const new1 = [
      {
        ID: "ten",
        LABEL: "T√™n c·ªßa b·∫°n l√† g√¨ ? ",
        MIN_LENGTH: 0,
        MAX_LENGTH: 200,
        PLACE_HOLDER: "Vui l√≤ng ghi r√µ th√¥ng tin.",
        REQUIRED: true,
      },
      {
        ID: "who",
        LABEL: "B·∫°n mu·ªën report g√¨ ?",
        MIN_LENGTH: 0,
        MAX_LENGTH: 200,
        PLACE_HOLDER: "Vui l√≤ng ghi r√µ th√¥ng tin,",
        REQUIRED: true,
      },
    ];
    //! ----------------------------------------

    if (interaction.isButton()) {
      var btnid = interaction.customId;
      if (btnid === "cticket") {
        var input = [];
        const form = await questiondb.findOne({ guildId: interaction.guildId });
        if (!form)
          return interaction.reply({
            content:
              "Server hi·ªán t·∫°i ch∆∞a c√≥ c√¢u h·ªèi, xin vui l√≤ng li√™n h·ªá BQL ƒë·ªÉ x·ª≠ l√Ω !",
          });
        form.question.map((v) => {
          var row = new MessageActionRow().addComponents(
            new TextInputComponent()
              .setCustomId(v.id)
              .setLabel(v.lable)
              .setMinLength(0)
              .setMaxLength(200)
              .setPlaceholder("Vui l√≤ng ghi r√µ th√¥ng tin.")
              .setRequired(true)
              .setStyle("SHORT"),
          );
          input.push(row);
        });
        var modal = new Modal()
          .setCustomId("form")
          .setTitle("ƒê∆°n Xin Tham Gia")
          .addComponents(input);
        interaction.showModal(modal);
      }

      if (btnid === "creport") {
        var input = [];
        new1.map((v) => {
          var row = new MessageActionRow().addComponents(
            new TextInputComponent()
              .setCustomId(v.ID)
              .setLabel(v.LABEL)
              .setMinLength(v.MIN_LENGTH)
              .setMaxLength(v.MAX_LENGTH)
              .setPlaceholder(v.PLACE_HOLDER)
              .setRequired(v.REQUIRED)
              .setStyle("SHORT"),
          );
          input.push(row);
        });
        var modal = new Modal()
          .setCustomId("new1")
          .setTitle("ƒê∆°n t·ªë c√°o")
          .addComponents(input);
        interaction.showModal(modal);
      }

      if (btnid === "close") {
        if (!interaction.memberPermissions.has("MANAGE_CHANNELS"))
          return interaction.reply({
            content: `Hey ${interaction.user.username}, b·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ticket ch·ªâ c√≥ BQL x√≥a.`,
            ephemeral: true,
          });
        const guild = client.guilds.cache.get(interaction.guildId);
        const chan = guild.channels.cache.get(interaction.channelId);
        const logsTicketdb = await ticketdb.findOne({
          guildId: interaction.guildId,
        });
        if (!logsTicketdb)
          return interaction.reply({
            content:
              "Server c·ªßa b·∫°n hi·ªán kh√¥ng c√≥ ƒëƒÉng k√Ω ho·∫∑c nh·∫≠p Log Ticket",
          });
        const attachmemt = await createTranscript(chan, {
          limit: -1,
          returnBuffer: false,
          fileName: `${chan.name}.html`,
        });
        var ticketid = CrytoJs.AES.encrypt(chan.topic, "rindev");
        var ticket_decode =
          ticketid.toString().slice(0, 8 - 1) +
          ticketid
            .toString()
            .slice(ticketid.toString().length - 8, ticketid.toString().length);
        fs.writeFileSync(
          `../Ticket-App/ticket-file/${ticket_decode}.html`,
          attachmemt.attachment.toString("utf8"),
        );
        var embed = new MessageEmbed()
          .setAuthor({
            name: `${interaction.guild.name} ‚Ä¢ Ticket Logs`,
            iconURL: interaction.guild.iconURL({ dynamic: true }),
          })
          .setColor("GREEN")
          .addFields(
            { name: "Ticket ID", value: ticket_decode, inline: true },
            {
              name: "Opened By",
              value: interaction.guild.members.cache.get(chan.topic).user
                .username,
              inline: true,
            },
            {
              name: "Closed By",
              value: interaction.member.user.username,
              inline: true,
            },
            {
              name: "Open Time",
              value: `<t:${chan.createdTimestamp}:f> `,
              inline: true,
            },
            {
              name: "Claimed By",
              value: interaction.member.user.username,
              inline: true,
            },
          )
          .setTimestamp()
          .setFooter({
            text: `Create By ${client.user.username}`,
            iconURL: client.user.displayAvatarURL({ dynamic: true }),
          });
        var btn_view = new MessageActionRow().addComponents(
          new MessageButton()
            .setStyle("LINK")
            .setLabel("View Online Transcript")
            .setURL(`https://brzone.xyz/ticketview/${ticket_decode}`)
            .setEmoji("üìÅ"),
        );
        guild.channels.cache
          .get(logsTicketdb.chLog)
          .send({ embeds: [embed], components: [btn_view] });
        interaction.reply({
          content: `Ticket n√†y s·∫Ω x√≥a trong 5 gi√¢y üîÜ **<@!${chan.topic}>**`,
        });
        setTimeout(() => chan.delete(), 1e3 * 10);
      }
      if (btnid === "transcripts") {
        interaction.editReply({ components: buttons(true) });
        var embed = new MessageEmbed()
          .setAuthor({
            name: `${interaction.guild.name} - Transcripts Ticket`,
            iconURL: client.user.displayAvatarURL({ dynamic: true }),
          })
          .setColor("#FF8989")
          .setDescription(
            "B·∫°n c√≥ mu·ªën l∆∞u l·∫°i l·ªãch s·ª≠ Ticket Kh√¥ng ?\n\n N·∫øu b·∫°n mu·ªën l∆∞u l·∫°i l·ªãch s·ª≠ Ticket vui l√≤ng b·∫•m v√†o **Close Ticket**.\nXin c·∫£m ∆°n !",
          )
          .setFooter({
            text: `Create by ${client.user.username}`,
            iconURL: client.user.displayAvatarURL({ dynamic: true }),
          });
        interaction.reply({ embeds: [embed], components: [button] });
      }
    }

    if (interaction.isModalSubmit()) {
      if (interaction.customId === "form") {
        var arr = [];
        const form = await questiondb.findOne({ guildId: interaction.guildId });
        form.question.map((v) =>
          arr.push(interaction.fields.getField(v.id), { lable: v.lable }),
        );
        var string = "";
        for (const x in arr) {
          for (const s in form.question) {
            if (arr[x].customId === form.question[s].id) {
              string +=
                `**${form.question[s].lable}**\n` +
                "```\n" +
                `${arr[x].value}\n` +
                "```\n";
            }
          }
        }
        var embed = new MessageEmbed()
          .setAuthor({
            name: `üî± V I C T O R Y ! üî± - Ticket Support üé´`,
            iconURL: client.user.displayAvatarURL({ dynamic: true }),
          })

          .setDescription(string)
          .setTitle(
            "‚Äî‚Äî‚Äî‚Äî‚Äî<a:tl1heartyellow:1062193119128469505>  ƒê∆°n Xin Tham Gia Nh√≥m <a:tl1heartyellow:1062193119128469505>‚Äî‚Äî‚Äî‚Äî‚Äî",
          )
          .setColor("#FFFF00")
          .setThumbnail(
            "https://media.discordapp.net/attachments/1039636369649184799/1062180312903323789/VictoryTeam.png?width=586&height=586",
          )
          .setFooter({
            text: `${client.user.username}`,
            iconURL: client.user.displayAvatarURL({ dynamic: true }),
          })
          .setTimestamp();

        var checkTicket = interaction.guild.channels.cache.find(
          (c) => c.topic === interaction.user.id,
        );
        if (checkTicket !== undefined)
          return interaction.reply({
            content: `Hey ${interaction.user.username}, b·∫°n ƒë√£ c√≥ m·ªôt ticket, ƒê√¢y l√† Ticket > <#${checkTicket.id}> !`,
            ephemeral: true,
          });
        var cTicket = await interaction.guild.channels.create(
          `ticket ${interaction.user.username}`,
          {
            type: "text",
            parent: interaction.channel.parentId, // category
            topic: interaction.user.id,
            permissionOverwrites: [
              {
                id: interaction.guild.id,
                deny: ["VIEW_CHANNEL"],
              },
              {
                id: interaction.user.id,
                allow: ["VIEW_CHANNEL"],
              },
            ],
          },
        );

        interaction.reply({
          content: `Hey ${interaction.user.username}, Ticket c·ªßa b·∫°n <#${cTicket.id}>`,
          ephemeral: true,
        });

        cTicket.send({
          content: `C√°m ∆°n <@${interaction.user.id}> ƒë√£ n·ªôp ƒë∆°n, vui l√≤ng ƒë·ª£i BQL xem x√©t v√† tr·∫£ l·ªùi b·∫°n nhanh nh·∫•t c√≥ th·ªÉ `,
          embeds: [embed],
          components: buttons(false),
        });
      } else if (interaction.customId === "new1") {
        var arr = [];
        new1.map((v) =>
          arr.push(interaction.fields.getField(v.ID), { lable: v.LABEL }),
        );
        var string1 = "";
        for (const x in arr) {
          for (const s in new1) {
            if (arr[x].customId === new1[s].ID) {
              string1 +=
                `**${new1[s].LABEL}**\n` +
                "```\n" +
                `${arr[x].value}\n` +
                "```\n";
            }
          }
        }
        var embed = new MessageEmbed()
          .setAuthor({
            name: `üî± V I C T O R Y ! üî± - Ticket Support üé´`,
            iconURL: client.user.displayAvatarURL({ dynamic: true }),
          })

          .setDescription(string1)
          .setTitle(
            "‚Äî‚Äî‚Äî‚Äî‚Äî<a:tl1heartyellow:1062193119128469505>  ƒê∆°n T·ªë C√°o <a:tl1heartyellow:1062193119128469505>‚Äî‚Äî‚Äî‚Äî‚Äî",
          )
          .setColor("#FFFF00")
          .setThumbnail(
            "https://media.discordapp.net/attachments/1039636369649184799/1062180312903323789/VictoryTeam.png?width=586&height=586",
          )
          .setFooter({
            text: `${client.user.username}`,
            iconURL: client.user.displayAvatarURL({ dynamic: true }),
          })
          .setTimestamp();

        var checkTicket = interaction.guild.channels.cache.find(
          (c) => c.topic === interaction.user.id,
        );
        if (checkTicket !== undefined)
          return interaction.reply({
            content: `Hey ${interaction.user.username}, b·∫°n ƒë√£ c√≥ m·ªôt ticket, ƒê√¢y l√† Ticket > <#${checkTicket.id}> !`,
            ephemeral: true,
          });
        var creport = await interaction.guild.channels.create(
          `ticket ${interaction.user.username}`,
          {
            type: "text",
            parent: interaction.channel.parentId, // category
            topic: interaction.user.id,
            permissionOverwrites: [
              {
                id: interaction.guild.id,
                deny: ["VIEW_CHANNEL"],
              },
              {
                id: interaction.user.id,
                allow: ["VIEW_CHANNEL"],
              },
            ],
          },
        );

        interaction.reply({
          content: `Hey ${interaction.user.username}, Ticket c·ªßa b·∫°n <#${creport.id}>`,
          ephemeral: true,
        });

        creport.send({
          content: `Ch√†o <@${interaction.user.id}>, c√°m ∆°n b·∫°n ƒë√£ report . Vui l√≤ng ƒë·ª£i  `,
          embeds: [embed],
          components: buttons(false),
        });
      }
    }
  },
};
